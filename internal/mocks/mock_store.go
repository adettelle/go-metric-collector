// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adettelle/go-metric-collector/internal/api (interfaces: Storager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddCounterMetric mocks base method.
func (m *MockStorager) AddCounterMetric(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounterMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCounterMetric indicates an expected call of AddCounterMetric.
func (mr *MockStoragerMockRecorder) AddCounterMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounterMetric", reflect.TypeOf((*MockStorager)(nil).AddCounterMetric), arg0, arg1)
}

// AddGaugeMetric mocks base method.
func (m *MockStorager) AddGaugeMetric(arg0 string, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGaugeMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGaugeMetric indicates an expected call of AddGaugeMetric.
func (mr *MockStoragerMockRecorder) AddGaugeMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGaugeMetric", reflect.TypeOf((*MockStorager)(nil).AddGaugeMetric), arg0, arg1)
}

// Finalize mocks base method.
func (m *MockStorager) Finalize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Finalize indicates an expected call of Finalize.
func (mr *MockStoragerMockRecorder) Finalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockStorager)(nil).Finalize))
}

// GetAllCounterMetrics mocks base method.
func (m *MockStorager) GetAllCounterMetrics() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounterMetrics")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounterMetrics indicates an expected call of GetAllCounterMetrics.
func (mr *MockStoragerMockRecorder) GetAllCounterMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounterMetrics", reflect.TypeOf((*MockStorager)(nil).GetAllCounterMetrics))
}

// GetAllGaugeMetrics mocks base method.
func (m *MockStorager) GetAllGaugeMetrics() (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGaugeMetrics")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGaugeMetrics indicates an expected call of GetAllGaugeMetrics.
func (mr *MockStoragerMockRecorder) GetAllGaugeMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGaugeMetrics", reflect.TypeOf((*MockStorager)(nil).GetAllGaugeMetrics))
}

// GetCounterMetric mocks base method.
func (m *MockStorager) GetCounterMetric(arg0 string) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterMetric", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCounterMetric indicates an expected call of GetCounterMetric.
func (mr *MockStoragerMockRecorder) GetCounterMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterMetric", reflect.TypeOf((*MockStorager)(nil).GetCounterMetric), arg0)
}

// GetGaugeMetric mocks base method.
func (m *MockStorager) GetGaugeMetric(arg0 string) (float64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeMetric", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGaugeMetric indicates an expected call of GetGaugeMetric.
func (mr *MockStoragerMockRecorder) GetGaugeMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeMetric", reflect.TypeOf((*MockStorager)(nil).GetGaugeMetric), arg0)
}
